//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "MyWaypointControl.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "MyWaypointControl.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Longitude(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Longitude);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Latitude(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Latitude);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Order(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Order);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_OptionOfInput(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->OptionOfInput);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Code(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Code);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Address(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Address;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_InputOptions(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->InputOptions;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Label(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Label;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ViewModel(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ViewModel;
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_OptionOfInput(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->OptionOfInput = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Longitude(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Longitude = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Latitude(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Latitude = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ViewModel(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ViewModel = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Address(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Address = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"Double", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   4
    L"System.Enum", L"",
    nullptr, nullptr, nullptr, nullptr,
    5, // System.ValueType
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //   5
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //   6
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   7
    L"RoutesOverBingMapsApp.Waypoint", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, true,  false,
    //   8
    L"RoutesOverBingMapsApp.MainPage", L"",
    &ActivateType<::RoutesOverBingMapsApp::MainPage>, nullptr, nullptr, nullptr,
    6, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   9
    L"RoutesOverBingMapsApp.AppViewModel", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    1, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, true,  false,
    //  10
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  11
    L"RoutesOverBingMapsApp.MyWaypointControl", L"",
    &ActivateType<::RoutesOverBingMapsApp::MyWaypointControl>, nullptr, nullptr, nullptr,
    10, // Windows.UI.Xaml.Controls.UserControl
    1, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //  12
    L"RoutesOverBingMapsApp.WayptInputComboOpt", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    8, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //  13
    L"RoutesOverBingMapsApp.WaypointInputOption", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::RoutesOverBingMapsApp::WaypointInputOption>,
    4, // System.Enum
    10, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"RoutesOverBingMapsApp.ConverterString2Double", L"",
    &ActivateType<::RoutesOverBingMapsApp::ConverterString2Double>, nullptr, nullptr, nullptr,
    1, // Object
    10, 3, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  15
    L"Windows.Foundation.Collections.IObservableVector`1<RoutesOverBingMapsApp.WayptInputComboOpt>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IObservableVector<::RoutesOverBingMapsApp::WayptInputComboOpt^>, ::RoutesOverBingMapsApp::WayptInputComboOpt^>, nullptr, nullptr,
    -1,
    10, 3, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    10, 3,::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      4,   //   7
      4,   //   8
      4,   //   9
      4,   //  10
      4,   //  11
      5,   //  12
      5,   //  13
      5,   //  14
      5,   //  15
      5,   //  16
      6,   //  17
      6,   //  18
      6,   //  19
      6,   //  20
      6,   //  21
      6,   //  22
      6,   //  23
      6,   //  24
      6,   //  25
      6,   //  26
      6,   //  27
      6,   //  28
      6,   //  29
      7,   //  30
      9,   //  31
      9,   //  32
      9,   //  33
      9,   //  34
     10,   //  35
     10,   //  36
     11,   //  37
     11,   //  38
     11,   //  39
     12,   //  40
     13,   //  41
     14,   //  42
     14,   //  43
     14,   //  44
     15,   //  45
     15,   //  46
     15,   //  47
     15,   //  48
     15,   //  49
     15,   //  50
     15,   //  51
     15,   //  52
     15,   //  53
     15,   //  54
     15,   //  55
     15,   //  56
     15,   //  57
     15,   //  58
     15,   //  59
     15,   //  60
     15,   //  61
     15,   //  62
     15,   //  63
     15,   //  64
     15,   //  65
     15,   //  66
     15,   //  67
     15,   //  68
     15,   //  69
     15,   //  70
     15,   //  71
     15,   //  72
     15,   //  73
     15,   //  74
     15,   //  75
     15,   //  76
     15,   //  77
     15,   //  78
     15,   //  79
     15,   //  80
     15,   //  81
     15,   //  82
     15,   //  83
     15,   //  84
     15,   //  85
     15,   //  86
     15,   //  87
     15,   //  88
     15,   //  89
     15,   //  90
     15,   //  91
     15,   //  92
     16,   //  93
};

struct EnumValueInfo
{
    PCWSTR name;
    int eValue;
};

const EnumValueInfo EnumValues[] =
{ 
    L"Address", (int) ::RoutesOverBingMapsApp::WaypointInputOption::Address,
    L"Coordinates", (int) ::RoutesOverBingMapsApp::WaypointInputOption::Coordinates,
    L"Pointer", (int) ::RoutesOverBingMapsApp::WaypointInputOption::Pointer,
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - RoutesOverBingMapsApp.MainPage.ViewModel
    L"ViewModel",
    &GetReferenceTypeMember_ViewModel<::RoutesOverBingMapsApp::MainPage>,
    nullptr,
    9, // RoutesOverBingMapsApp.AppViewModel
    -1,
    true,  false, false,
    //   1 - RoutesOverBingMapsApp.MyWaypointControl.ViewModel
    L"ViewModel",
    nullptr,
    &SetReferenceTypeMember_ViewModel<::RoutesOverBingMapsApp::MyWaypointControl, ::RoutesOverBingMapsApp::Waypoint>,
    7, // RoutesOverBingMapsApp.Waypoint
    -1,
    false, false, false,
    //   2 - RoutesOverBingMapsApp.MyWaypointControl.Longitude
    L"Longitude",
    &GetValueTypeMember_Longitude<::RoutesOverBingMapsApp::MyWaypointControl, ::default::float64>,
    &SetValueTypeMember_Longitude<::RoutesOverBingMapsApp::MyWaypointControl, ::default::float64>,
    2, // Double
    -1,
    false, false, false,
    //   3 - RoutesOverBingMapsApp.MyWaypointControl.Latitude
    L"Latitude",
    &GetValueTypeMember_Latitude<::RoutesOverBingMapsApp::MyWaypointControl, ::default::float64>,
    &SetValueTypeMember_Latitude<::RoutesOverBingMapsApp::MyWaypointControl, ::default::float64>,
    2, // Double
    -1,
    false, false, false,
    //   4 - RoutesOverBingMapsApp.MyWaypointControl.Address
    L"Address",
    &GetReferenceTypeMember_Address<::RoutesOverBingMapsApp::MyWaypointControl>,
    &SetReferenceTypeMember_Address<::RoutesOverBingMapsApp::MyWaypointControl, ::Platform::String>,
    3, // String
    -1,
    false, false, false,
    //   5 - RoutesOverBingMapsApp.MyWaypointControl.Order
    L"Order",
    &GetValueTypeMember_Order<::RoutesOverBingMapsApp::MyWaypointControl, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  false, false,
    //   6 - RoutesOverBingMapsApp.MyWaypointControl.OptionOfInput
    L"OptionOfInput",
    &GetValueTypeMember_OptionOfInput<::RoutesOverBingMapsApp::MyWaypointControl, ::RoutesOverBingMapsApp::WaypointInputOption>,
    &SetEnumMember_OptionOfInput<::RoutesOverBingMapsApp::MyWaypointControl, ::RoutesOverBingMapsApp::WaypointInputOption>,
    13, // RoutesOverBingMapsApp.WaypointInputOption
    -1,
    false, false, false,
    //   7 - RoutesOverBingMapsApp.MyWaypointControl.InputOptions
    L"InputOptions",
    &GetReferenceTypeMember_InputOptions<::RoutesOverBingMapsApp::MyWaypointControl>,
    nullptr,
    15, // Windows.Foundation.Collections.IObservableVector`1<RoutesOverBingMapsApp.WayptInputComboOpt>
    -1,
    true,  false, false,
    //   8 - RoutesOverBingMapsApp.WayptInputComboOpt.Code
    L"Code",
    &GetValueTypeMember_Code<::RoutesOverBingMapsApp::WayptInputComboOpt, ::RoutesOverBingMapsApp::WaypointInputOption>,
    nullptr,
    13, // RoutesOverBingMapsApp.WaypointInputOption
    -1,
    true,  false, false,
    //   9 - RoutesOverBingMapsApp.WayptInputComboOpt.Label
    L"Label",
    &GetReferenceTypeMember_Label<::RoutesOverBingMapsApp::WayptInputComboOpt>,
    nullptr,
    3, // String
    -1,
    true,  false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        for (int i = pTypeInfo->firstEnumValueIndex; i < pNextTypeInfo->firstEnumValueIndex; i++)
        {
            userType->AddEnumValue(
                ::Platform::StringReference(EnumValues[i].name),
                ::Windows::Foundation::PropertyValue::CreateInt32(EnumValues[i].eValue));
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

